version: "3"

services:
  nginx-proxy:
    image: jwilder/nginx-proxy
    ports:
      - "80:80"
    volumes:
      - /var/run/docker.sock:/tmp/docker.sock:ro
    networks:
      - frontendNetwork

  webapp:
    build: ./webapp
    command: npm start
    volumes:
     - ./webapp:/var/www/
    # ports:
    #   - "8080:80"
    environment:
      - VIRTUAL_HOST=webapp.dockerlocal
      - VIRTUAL_PORTO=8080
    networks:
      - frontendNetwork
      - backendNetwork

  monitor:
    build: ./monitor
    command: npm start
    volumes:
      - ./monitor:/var/www/
    # ports:
    #   - "8080:80"
    environment:
      - VIRTUAL_HOST=monitor.dockerlocal
      - VIRTUAL_PORT=8080
      # - VIRTUAL_PORT=80
    networks:
      - frontendNetwork
      - backendNetwork

  portainer:
    image: portainer/portainer
    # container_name: portainer
    # command: "-v /var/run/docker.sock:/var/run/docker.sock -v /data/portainer:/data portainer/portainer"
    volumes:
      - /var/run/docker.sock:/var/run/docker.sock
      - ./data/portainer:/data
    # ports:
    #   - "9000:80"
    environment:
      - VIRTUAL_HOST=portainer.dockerlocal
      - VIRTUAL_PORT=9000
    networks:
      - frontendNetwork


  # worker:
  #   build:
  #     context: ./worker
  #   depends_on:
  #     - "redis"
  #   networks:
  #     - backendNetwork

  redis:
    image: redis:alpine
    # container_name: redis
    ports: ["6379"]
    networks:
      - backendNetwork

  # sqldb:
  #   image: mariadb
  #   container_name: sqldb
  #   restart: always
  #   environment:
  #     MYSQL_ROOT_PASSWORD: docker
  #     MYSQL_USER: testdbuser
  #     MYSQL_PASSWORD: testdbpassword
  #     MYSQL_DATABASE: teststatdb
  #   volumes:
  #     - ./data/maria:/var/lib/mysql
  #   ports:
  #     - 8306:3306
  #   networks:
  #     - backendNetwork

  sqldb:
    image: mariadb
    restart: always
    environment:
      MYSQL_ROOT_PASSWORD: docker
      MYSQL_USER: testdbuser
      MYSQL_PASSWORD: testdbpassword
      MYSQL_DATABASE: teststatdb
    networks:
      - backendNetwork
    volumes:
      - ./data/maria:/var/lib/mysql
    # ports:
    #   - "3306:3306"

  mongo:
    image: mongo:latest
    # container_name: mongo
    environment:
      - MONGO_DATA_DIR=/data/db
      - MONGO_LOG_DIR=/dev/null
    networks:
      - backendNetwork
    volumes:
      - ./data/mongo:/data/db
    # ports:
    #   - 27017:27017
    command: mongod --smallfiles --logpath=/dev/null # --quiet

networks:
  frontendNetwork:
  backendNetwork: